Módulos:
	Implementados:
	Desenvolvimento:
		OOSDL
	Pendentes:
		AdventureGame
		*MyAdventureGame

Componentes OOSDL:
	Implementados:
		Video - Instável
		Input - Instável
		Audio - Estável
		Thread - Instável
		Timer - Instável
		CD - Estável
	Desenvolvimento:
		Net
	Pendentes:
		*OpenGL

*: Desejável

Revisar:
	Defines - Se todos estão usando OOSDL_CONFIG ao invés de DEFINES
	Defines - Se todos estão usando a mesma nomenclatura de define(OOSDL_NomeDaClasse_XPP) no início dos arquivos.
	C++11 - Se todos estão usando as funcionalidades de C++11 e BOOST ao invés das depreciadas de C++03
	OOSDL Vs SDL - Utilizar os próprios componentes OOSDL, quando necessários, ao invés de SDL puro.
	Dependências - Verificar se as dependências entre componentes são consistentes e necessárias.
	Métodos - Revisar os métodos operadores, funções amigas de operadores, construtores de cópia, construtores explícitos e a constância dos métodos.
	Exceções(segurança) - Verificar e documentar a garantia de segurança de cada método em relação à exceções: [garantia de atomicidade: garante que o estado do programa não será alterado caso o programa levante uma exceção] [garantia básica: garante que o programa continue em um estado consistente após o levantamento das exceções] [garantia nenhuma]
	Exceções(hierarquia) - Revisar se as exceções usadas obedecem corretamente a hierarquia de exceções do OOSDL.
	Exceções(usabilidade) - Revisar usabilidade das exceções. (se elas precisam de parâmetros quando criadas para facilitar tratamento e depuração, etc.)
	Observer - Implementar o padrão observer nas classes.
	Design Patterns - Documentar ops padrões de projetos implementados.
	Free - Revisar liberação de recursos de cada componente.
	Concorrência - Documentar a segurança de cada método em relação ao processamento concorrente.
	explicit - Revisar uso de explicit nos construtores.
	Inclusão - Revisar inclusão de bibliotecas para as classes que as usam e entre as classes que se relacionam. Além do uso de LibClient, SDLClient, SDLSubClient, SDLEverythingClient, e correlatos.
	nullptr - Trocar utilizações de NULL(macro que significa 0 ou (void*) 0) por nullptr, que é um ponteiro constante pré-definido que aponta para NULL(a diferença, basicamente, é que NULL é um int e nullptr é um void*, eliminando falhas de referência e/ou ambiguidade).
	Métodos SDL - Verificar se os métodos que retornam objetos SDL têm os métodos para constantes e não constantes, se retornam realmente uma referência/ponteiro e não cópia e verificar padrão de nomenclatura dos métodos.
	Abstract Factory - Criar modelo Abstract Factory para tornar o framework mais flexível.
	Class Diagram - Atualizar o diagrama de classes com as classes Font e Sprite no módulo Video

Design Patterns:
	Singleton: Audio, Keyboard, Joystick*, Mouse, CDDrive*
	Factory Method: Audio::playSound, Audio::playMusic
	Bridge: Color, Rect, Bitmap, TCPSocket, Thread, Lock, CDDrive
	State: Sound, Music, CDDrive
	Proxy: Debug
	Flyweight: LibUser/Filhos
	
	Observer(à implementar): ConnectionSocket, UDPSocket, ServerSocket, Music, Sound, Input, Thread
	
	Command: ConnectionSocket?, UDPSocket?
	Strategy: <considerar uso>
	Facade: <considerar uso>
	Template Method: <considerar uso>
